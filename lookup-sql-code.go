package pgerrors

//////////////////////////////
// THIS IS A GENERATED FILE //
//////////////////////////////

func LookupSqlCode(sqlcode string) string {
	switch sqlcode {
	case `00000`:
		return `SuccessfulCompletion`
	case `01000`:
		return `WarningWarning`
	case `01003`:
		return `NullValueEliminatedInSetFunctionWarning`
	case `01004`:
		return `StringDataRightTruncationWarning`
	case `01006`:
		return `PrivilegeNotRevokedWarning`
	case `01007`:
		return `PrivilegeNotGrantedWarning`
	case `01008`:
		return `ImplicitZeroBitPaddingWarning`
	case `0100C`:
		return `DynamicResultSetsReturnedWarning`
	case `01P01`:
		return `DeprecatedFeatureWarning`
	case `02000`:
		return `NoDataWarning`
	case `02001`:
		return `NoAdditionalDynamicResultSetsReturnedWarning`
	case `03000`:
		return `SqlStatementNotYetCompleteError`
	case `08000`:
		return `ConnectionExceptionError`
	case `08001`:
		return `SqlclientUnableToEstablishSqlconnectionError`
	case `08003`:
		return `ConnectionDoesNotExistError`
	case `08004`:
		return `SqlserverRejectedEstablishmentOfSqlconnectionError`
	case `08006`:
		return `ConnectionFailureError`
	case `08007`:
		return `TransactionResolutionUnknownError`
	case `08P01`:
		return `ProtocolViolationError`
	case `09000`:
		return `TriggeredActionExceptionError`
	case `0A000`:
		return `FeatureNotSupportedError`
	case `0B000`:
		return `InvalidTransactionInitiationError`
	case `0F000`:
		return `LocatorExceptionError`
	case `0F001`:
		return `InvalidLocatorSpecificationError`
	case `0L000`:
		return `InvalidGrantorError`
	case `0LP01`:
		return `InvalidGrantOperationError`
	case `0P000`:
		return `InvalidRoleSpecificationError`
	case `0Z000`:
		return `DiagnosticsExceptionError`
	case `0Z002`:
		return `StackedDiagnosticsAccessedWithoutActiveHandlerError`
	case `20000`:
		return `CaseNotFoundError`
	case `21000`:
		return `CardinalityViolationError`
	case `22000`:
		return `DataExceptionError`
	case `22001`:
		return `StringDataRightTruncationError`
	case `22002`:
		return `NullValueNoIndicatorParameterError`
	case `22003`:
		return `NumericValueOutOfRangeError`
	case `22004`:
		return `NullValueNotAllowedError`
	case `22005`:
		return `ErrorInAssignmentError`
	case `22007`:
		return `InvalidDatetimeFormatError`
	case `22008`:
		return `DatetimeValueOutOfRangeError`
	case `22009`:
		return `InvalidTimeZoneDisplacementValueError`
	case `2200B`:
		return `EscapeCharacterConflictError`
	case `2200C`:
		return `InvalidUseOfEscapeCharacterError`
	case `2200D`:
		return `InvalidEscapeOctetError`
	case `2200F`:
		return `ZeroLengthCharacterStringError`
	case `2200G`:
		return `MostSpecificTypeMismatchError`
	case `2200H`:
		return `SequenceGeneratorLimitExceededError`
	case `2200L`:
		return `NotAnXmlDocumentError`
	case `2200M`:
		return `InvalidXmlDocumentError`
	case `2200N`:
		return `InvalidXmlContentError`
	case `2200S`:
		return `InvalidXmlCommentError`
	case `2200T`:
		return `InvalidXmlProcessingInstructionError`
	case `22010`:
		return `InvalidIndicatorParameterValueError`
	case `22011`:
		return `SubstringErrorError`
	case `22012`:
		return `DivisionByZeroError`
	case `22013`:
		return `InvalidPrecedingOrFollowingSizeError`
	case `22014`:
		return `InvalidArgumentForNtileFunctionError`
	case `22015`:
		return `IntervalFieldOverflowError`
	case `22016`:
		return `InvalidArgumentForNthValueFunctionError`
	case `22018`:
		return `InvalidCharacterValueForCastError`
	case `22019`:
		return `InvalidEscapeCharacterError`
	case `2201B`:
		return `InvalidRegularExpressionError`
	case `2201E`:
		return `InvalidArgumentForLogarithmError`
	case `2201F`:
		return `InvalidArgumentForPowerFunctionError`
	case `2201G`:
		return `InvalidArgumentForWidthBucketFunctionError`
	case `2201W`:
		return `InvalidRowCountInLimitClauseError`
	case `2201X`:
		return `InvalidRowCountInResultOffsetClauseError`
	case `22021`:
		return `CharacterNotInRepertoireError`
	case `22022`:
		return `IndicatorOverflowError`
	case `22023`:
		return `InvalidParameterValueError`
	case `22024`:
		return `UnterminatedCStringError`
	case `22025`:
		return `InvalidEscapeSequenceError`
	case `22026`:
		return `StringDataLengthMismatchError`
	case `22027`:
		return `TrimErrorError`
	case `2202E`:
		return `ArraySubscriptErrorError`
	case `2202G`:
		return `InvalidTablesampleRepeatError`
	case `2202H`:
		return `InvalidTablesampleArgumentError`
	case `22030`:
		return `DuplicateJsonObjectKeyValueError`
	case `22031`:
		return `InvalidArgumentForSqlJsonDatetimeFunctionError`
	case `22032`:
		return `InvalidJsonTextError`
	case `22033`:
		return `InvalidSqlJsonSubscriptError`
	case `22034`:
		return `MoreThanOneSqlJsonItemError`
	case `22035`:
		return `NoSqlJsonItemError`
	case `22036`:
		return `NonNumericSqlJsonItemError`
	case `22037`:
		return `NonUniqueKeysInAJsonObjectError`
	case `22038`:
		return `SingletonSqlJsonItemRequiredError`
	case `22039`:
		return `SqlJsonArrayNotFoundError`
	case `2203A`:
		return `SqlJsonMemberNotFoundError`
	case `2203B`:
		return `SqlJsonNumberNotFoundError`
	case `2203C`:
		return `SqlJsonObjectNotFoundError`
	case `2203D`:
		return `TooManyJsonArrayElementsError`
	case `2203E`:
		return `TooManyJsonObjectMembersError`
	case `2203F`:
		return `SqlJsonScalarRequiredError`
	case `2203G`:
		return `SqlJsonItemCannotBeCastToTargetTypeError`
	case `22P01`:
		return `FloatingPointExceptionError`
	case `22P02`:
		return `InvalidTextRepresentationError`
	case `22P03`:
		return `InvalidBinaryRepresentationError`
	case `22P04`:
		return `BadCopyFileFormatError`
	case `22P05`:
		return `UntranslatableCharacterError`
	case `22P06`:
		return `NonstandardUseOfEscapeCharacterError`
	case `23000`:
		return `IntegrityConstraintViolationError`
	case `23001`:
		return `RestrictViolationError`
	case `23502`:
		return `NotNullViolationError`
	case `23503`:
		return `ForeignKeyViolationError`
	case `23505`:
		return `UniqueViolationError`
	case `23514`:
		return `CheckViolationError`
	case `23P01`:
		return `ExclusionViolationError`
	case `24000`:
		return `InvalidCursorStateError`
	case `25000`:
		return `InvalidTransactionStateError`
	case `25001`:
		return `ActiveSqlTransactionError`
	case `25002`:
		return `BranchTransactionAlreadyActiveError`
	case `25003`:
		return `InappropriateAccessModeForBranchTransactionError`
	case `25004`:
		return `InappropriateIsolationLevelForBranchTransactionError`
	case `25005`:
		return `NoActiveSqlTransactionForBranchTransactionError`
	case `25006`:
		return `ReadOnlySqlTransactionError`
	case `25007`:
		return `SchemaAndDataStatementMixingNotSupportedError`
	case `25008`:
		return `HeldCursorRequiresSameIsolationLevelError`
	case `25P01`:
		return `NoActiveSqlTransactionError`
	case `25P02`:
		return `InFailedSqlTransactionError`
	case `25P03`:
		return `IdleInTransactionSessionTimeoutError`
	case `25P04`:
		return `TransactionTimeoutError`
	case `26000`:
		return `UndefinedPstatementError`
	case `27000`:
		return `TriggeredDataChangeViolationError`
	case `28000`:
		return `InvalidAuthorizationSpecificationError`
	case `28P01`:
		return `InvalidPasswordError`
	case `2B000`:
		return `DependentPrivilegeDescriptorsStillExistError`
	case `2BP01`:
		return `DependentObjectsStillExistError`
	case `2D000`:
		return `InvalidTransactionTerminationError`
	case `2F000`:
		return `SqlRoutineExceptionError`
	case `2F002`:
		return `ModifyingSqlDataNotPermittedError`
	case `2F003`:
		return `ProhibitedSqlStatementAttemptedError`
	case `2F004`:
		return `ReadingSqlDataNotPermittedError`
	case `2F005`:
		return `FunctionExecutedNoReturnStatementError`
	case `34000`:
		return `UndefinedCursorError`
	case `38000`:
		return `ExternalRoutineExceptionError`
	case `38001`:
		return `ContainingSqlNotPermittedError`
	case `38002`:
		return `ModifyingSqlDataNotPermittedError`
	case `38003`:
		return `ProhibitedSqlStatementAttemptedError`
	case `38004`:
		return `ReadingSqlDataNotPermittedError`
	case `39000`:
		return `ExternalRoutineInvocationExceptionError`
	case `39001`:
		return `InvalidSqlstateReturnedError`
	case `39004`:
		return `NullValueNotAllowedError`
	case `39P01`:
		return `TriggerProtocolViolatedError`
	case `39P02`:
		return `SrfProtocolViolatedError`
	case `39P03`:
		return `EventTriggerProtocolViolatedError`
	case `3B000`:
		return `SavepointExceptionError`
	case `3B001`:
		return `InvalidSavepointSpecificationError`
	case `3D000`:
		return `UndefinedDatabaseError`
	case `3F000`:
		return `UndefinedSchemaError`
	case `40000`:
		return `TransactionRollbackError`
	case `40001`:
		return `SerializationFailureError`
	case `40002`:
		return `TransactionIntegrityConstraintViolationError`
	case `40003`:
		return `StatementCompletionUnknownError`
	case `40P01`:
		return `DeadlockDetectedError`
	case `42000`:
		return `SyntaxErrorOrAccessRuleViolationError`
	case `42501`:
		return `InsufficientPrivilegeError`
	case `42601`:
		return `SyntaxErrorError`
	case `42602`:
		return `InvalidNameError`
	case `42611`:
		return `InvalidColumnDefinitionError`
	case `42622`:
		return `NameTooLongError`
	case `42701`:
		return `DuplicateColumnError`
	case `42702`:
		return `AmbiguousColumnError`
	case `42703`:
		return `UndefinedColumnError`
	case `42704`:
		return `UndefinedObjectError`
	case `42710`:
		return `DuplicateObjectError`
	case `42712`:
		return `DuplicateAliasError`
	case `42723`:
		return `DuplicateFunctionError`
	case `42725`:
		return `AmbiguousFunctionError`
	case `42803`:
		return `GroupingErrorError`
	case `42804`:
		return `DatatypeMismatchError`
	case `42809`:
		return `WrongObjectTypeError`
	case `42830`:
		return `InvalidForeignKeyError`
	case `42846`:
		return `CannotCoerceError`
	case `42883`:
		return `UndefinedFunctionError`
	case `428C9`:
		return `GeneratedAlwaysError`
	case `42939`:
		return `ReservedNameError`
	case `42P01`:
		return `UndefinedTableError`
	case `42P02`:
		return `UndefinedParameterError`
	case `42P03`:
		return `DuplicateCursorError`
	case `42P04`:
		return `DuplicateDatabaseError`
	case `42P05`:
		return `DuplicatePreparedStatementError`
	case `42P06`:
		return `DuplicateSchemaError`
	case `42P07`:
		return `DuplicateTableError`
	case `42P08`:
		return `AmbiguousParameterError`
	case `42P09`:
		return `AmbiguousAliasError`
	case `42P10`:
		return `InvalidColumnReferenceError`
	case `42P11`:
		return `InvalidCursorDefinitionError`
	case `42P12`:
		return `InvalidDatabaseDefinitionError`
	case `42P13`:
		return `InvalidFunctionDefinitionError`
	case `42P14`:
		return `InvalidPreparedStatementDefinitionError`
	case `42P15`:
		return `InvalidSchemaDefinitionError`
	case `42P16`:
		return `InvalidTableDefinitionError`
	case `42P17`:
		return `InvalidObjectDefinitionError`
	case `42P18`:
		return `IndeterminateDatatypeError`
	case `42P19`:
		return `InvalidRecursionError`
	case `42P20`:
		return `WindowingErrorError`
	case `42P21`:
		return `CollationMismatchError`
	case `42P22`:
		return `IndeterminateCollationError`
	case `44000`:
		return `WithCheckOptionViolationError`
	case `53000`:
		return `InsufficientResourcesError`
	case `53100`:
		return `DiskFullError`
	case `53200`:
		return `OutOfMemoryError`
	case `53300`:
		return `TooManyConnectionsError`
	case `53400`:
		return `ConfigurationLimitExceededError`
	case `54000`:
		return `ProgramLimitExceededError`
	case `54001`:
		return `StatementTooComplexError`
	case `54011`:
		return `TooManyColumnsError`
	case `54023`:
		return `TooManyArgumentsError`
	case `55000`:
		return `ObjectNotInPrerequisiteStateError`
	case `55006`:
		return `ObjectInUseError`
	case `55P02`:
		return `CantChangeRuntimeParamError`
	case `55P03`:
		return `LockNotAvailableError`
	case `55P04`:
		return `UnsafeNewEnumValueUsageError`
	case `57000`:
		return `OperatorInterventionError`
	case `57014`:
		return `QueryCanceledError`
	case `57P01`:
		return `AdminShutdownError`
	case `57P02`:
		return `CrashShutdownError`
	case `57P03`:
		return `CannotConnectNowError`
	case `57P04`:
		return `DatabaseDroppedError`
	case `57P05`:
		return `IdleSessionTimeoutError`
	case `58000`:
		return `SystemErrorError`
	case `58030`:
		return `IoErrorError`
	case `58P01`:
		return `UndefinedFileError`
	case `58P02`:
		return `DuplicateFileError`
	case `F0000`:
		return `ConfigFileErrorError`
	case `F0001`:
		return `LockFileExistsError`
	case `HV000`:
		return `FdwErrorError`
	case `HV001`:
		return `FdwOutOfMemoryError`
	case `HV002`:
		return `FdwDynamicParameterValueNeededError`
	case `HV004`:
		return `FdwInvalidDataTypeError`
	case `HV005`:
		return `FdwColumnNameNotFoundError`
	case `HV006`:
		return `FdwInvalidDataTypeDescriptorsError`
	case `HV007`:
		return `FdwInvalidColumnNameError`
	case `HV008`:
		return `FdwInvalidColumnNumberError`
	case `HV009`:
		return `FdwInvalidUseOfNullPointerError`
	case `HV00A`:
		return `FdwInvalidStringFormatError`
	case `HV00B`:
		return `FdwInvalidHandleError`
	case `HV00C`:
		return `FdwInvalidOptionIndexError`
	case `HV00D`:
		return `FdwInvalidOptionNameError`
	case `HV00J`:
		return `FdwOptionNameNotFoundError`
	case `HV00K`:
		return `FdwReplyHandleError`
	case `HV00L`:
		return `FdwUnableToCreateExecutionError`
	case `HV00M`:
		return `FdwUnableToCreateReplyError`
	case `HV00N`:
		return `FdwUnableToEstablishConnectionError`
	case `HV00P`:
		return `FdwNoSchemasError`
	case `HV00Q`:
		return `FdwSchemaNotFoundError`
	case `HV00R`:
		return `FdwTableNotFoundError`
	case `HV010`:
		return `FdwFunctionSequenceErrorError`
	case `HV014`:
		return `FdwTooManyHandlesError`
	case `HV021`:
		return `FdwInconsistentDescriptorInformationError`
	case `HV024`:
		return `FdwInvalidAttributeValueError`
	case `HV090`:
		return `FdwInvalidStringLengthOrBufferLengthError`
	case `HV091`:
		return `FdwInvalidDescriptorFieldIdentifierError`
	case `P0000`:
		return `PlpgsqlErrorError`
	case `P0001`:
		return `RaiseExceptionError`
	case `P0002`:
		return `NoDataFoundError`
	case `P0003`:
		return `TooManyRowsError`
	case `P0004`:
		return `AssertFailureError`
	case `XX000`:
		return `InternalErrorError`
	case `XX001`:
		return `DataCorruptedError`
	case `XX002`:
		return `IndexCorruptedError`
	default:
		return ``
	}
}
